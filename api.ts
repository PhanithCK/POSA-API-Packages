/* tslint:disable */
/* eslint-disable */
/**
 * POSA API
 * Product Page
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
import type { RequestArgs } from "./base";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "./base";

/**
 *
 * @export
 * @interface ApiAddOptionValuesBody
 */
export interface ApiAddOptionValuesBody {
  /**
   *
   * @type {Array<string>}
   * @memberof ApiAddOptionValuesBody
   */
  values?: Array<string>;
}
/**
 *
 * @export
 * @interface ApiAddProductOptionBody
 */
export interface ApiAddProductOptionBody {
  /**
   *
   * @type {string}
   * @memberof ApiAddProductOptionBody
   */
  title?: string;
}
/**
 *
 * @export
 * @interface ApiCreateVariantBody
 */
export interface ApiCreateVariantBody {
  /**
   *
   * @type {string}
   * @memberof ApiCreateVariantBody
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof ApiCreateVariantBody
   */
  external_id?: string;
  /**
   *
   * @type {string}
   * @memberof ApiCreateVariantBody
   */
  handle?: string;
  /**
   *
   * @type {number}
   * @memberof ApiCreateVariantBody
   */
  height?: number;
  /**
   *
   * @type {string}
   * @memberof ApiCreateVariantBody
   */
  hs_code?: string;
  /**
   *
   * @type {number}
   * @memberof ApiCreateVariantBody
   */
  length?: number;
  /**
   *
   * @type {string}
   * @memberof ApiCreateVariantBody
   */
  material?: string;
  /**
   *
   * @type {string}
   * @memberof ApiCreateVariantBody
   */
  mid_code?: string;
  /**
   *
   * @type {string}
   * @memberof ApiCreateVariantBody
   */
  origin_country?: string;
  /**
   *
   * @type {string}
   * @memberof ApiCreateVariantBody
   */
  status?: string;
  /**
   *
   * @type {string}
   * @memberof ApiCreateVariantBody
   */
  subtitle?: string;
  /**
   *
   * @type {string}
   * @memberof ApiCreateVariantBody
   */
  title?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ApiCreateVariantBody
   */
  valuesID?: Array<string>;
  /**
   *
   * @type {number}
   * @memberof ApiCreateVariantBody
   */
  weight?: number;
  /**
   *
   * @type {number}
   * @memberof ApiCreateVariantBody
   */
  width?: number;
}
/**
 *
 * @export
 * @interface ApiUpdateProductBody
 */
export interface ApiUpdateProductBody {
  /**
   *
   * @type {string}
   * @memberof ApiUpdateProductBody
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof ApiUpdateProductBody
   */
  external_id?: string;
  /**
   *
   * @type {string}
   * @memberof ApiUpdateProductBody
   */
  handle?: string;
  /**
   *
   * @type {number}
   * @memberof ApiUpdateProductBody
   */
  height?: number;
  /**
   *
   * @type {string}
   * @memberof ApiUpdateProductBody
   */
  hs_code?: string;
  /**
   *
   * @type {number}
   * @memberof ApiUpdateProductBody
   */
  length?: number;
  /**
   *
   * @type {string}
   * @memberof ApiUpdateProductBody
   */
  material?: string;
  /**
   *
   * @type {string}
   * @memberof ApiUpdateProductBody
   */
  mid_code?: string;
  /**
   *
   * @type {string}
   * @memberof ApiUpdateProductBody
   */
  origin_country?: string;
  /**
   *
   * @type {string}
   * @memberof ApiUpdateProductBody
   */
  status?: string;
  /**
   *
   * @type {string}
   * @memberof ApiUpdateProductBody
   */
  subtitle?: string;
  /**
   *
   * @type {string}
   * @memberof ApiUpdateProductBody
   */
  title?: string;
  /**
   *
   * @type {number}
   * @memberof ApiUpdateProductBody
   */
  weight?: number;
  /**
   *
   * @type {number}
   * @memberof ApiUpdateProductBody
   */
  width?: number;
}
/**
 *
 * @export
 * @interface ApiUpdateProductOptionBody
 */
export interface ApiUpdateProductOptionBody {
  /**
   *
   * @type {string}
   * @memberof ApiUpdateProductOptionBody
   */
  title?: string;
}
/**
 *
 * @export
 * @interface ApiUpdateVariantBody
 */
export interface ApiUpdateVariantBody {
  /**
   *
   * @type {string}
   * @memberof ApiUpdateVariantBody
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof ApiUpdateVariantBody
   */
  external_id?: string;
  /**
   *
   * @type {string}
   * @memberof ApiUpdateVariantBody
   */
  handle?: string;
  /**
   *
   * @type {number}
   * @memberof ApiUpdateVariantBody
   */
  height?: number;
  /**
   *
   * @type {string}
   * @memberof ApiUpdateVariantBody
   */
  hs_code?: string;
  /**
   *
   * @type {number}
   * @memberof ApiUpdateVariantBody
   */
  length?: number;
  /**
   *
   * @type {string}
   * @memberof ApiUpdateVariantBody
   */
  material?: string;
  /**
   *
   * @type {string}
   * @memberof ApiUpdateVariantBody
   */
  mid_code?: string;
  /**
   *
   * @type {string}
   * @memberof ApiUpdateVariantBody
   */
  origin_country?: string;
  /**
   *
   * @type {string}
   * @memberof ApiUpdateVariantBody
   */
  status?: string;
  /**
   *
   * @type {string}
   * @memberof ApiUpdateVariantBody
   */
  subtitle?: string;
  /**
   *
   * @type {string}
   * @memberof ApiUpdateVariantBody
   */
  title?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ApiUpdateVariantBody
   */
  valuesID?: Array<string>;
  /**
   *
   * @type {number}
   * @memberof ApiUpdateVariantBody
   */
  weight?: number;
  /**
   *
   * @type {number}
   * @memberof ApiUpdateVariantBody
   */
  width?: number;
}
/**
 *
 * @export
 * @interface SchemaCategory
 */
export interface SchemaCategory {
  /**
   *
   * @type {string}
   * @memberof SchemaCategory
   */
  CreatedAt?: string;
  /**
   * This is for GORM to load Data when fetching from Database
   * @type {Array<SchemaCategory>}
   * @memberof SchemaCategory
   */
  children?: Array<SchemaCategory>;
  /**
   *
   * @type {string}
   * @memberof SchemaCategory
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof SchemaCategory
   */
  handle?: string;
  /**
   *
   * @type {string}
   * @memberof SchemaCategory
   */
  id?: string;
  /**
   *
   * @type {boolean}
   * @memberof SchemaCategory
   */
  is_active?: boolean;
  /**
   *
   * @type {string}
   * @memberof SchemaCategory
   */
  name?: string;
  /**
   *
   * @type {number}
   * @memberof SchemaCategory
   */
  parent_category_id?: number;
}
/**
 *
 * @export
 * @interface SchemaImage
 */
export interface SchemaImage {
  /**
   *
   * @type {string}
   * @memberof SchemaImage
   */
  imageID?: string;
  /**
   *
   * @type {string}
   * @memberof SchemaImage
   */
  productID?: string;
  /**
   *
   * @type {string}
   * @memberof SchemaImage
   */
  url?: string;
}
/**
 *
 * @export
 * @interface SchemaOption
 */
export interface SchemaOption {
  /**
   *
   * @type {string}
   * @memberof SchemaOption
   */
  CreatedAt?: string;
  /**
   *
   * @type {string}
   * @memberof SchemaOption
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof SchemaOption
   */
  product_id?: string;
  /**
   *
   * @type {string}
   * @memberof SchemaOption
   */
  title?: string;
  /**
   *
   * @type {Array<SchemaOptionValue>}
   * @memberof SchemaOption
   */
  values?: Array<SchemaOptionValue>;
}
/**
 *
 * @export
 * @interface SchemaOptionValue
 */
export interface SchemaOptionValue {
  /**
   *
   * @type {string}
   * @memberof SchemaOptionValue
   */
  CreatedAt?: string;
  /**
   *
   * @type {string}
   * @memberof SchemaOptionValue
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof SchemaOptionValue
   */
  option_id?: string;
  /**
   *
   * @type {string}
   * @memberof SchemaOptionValue
   */
  value?: string;
  /**
   *
   * @type {Array<SchemaVariant>}
   * @memberof SchemaOptionValue
   */
  varaints?: Array<SchemaVariant>;
}
/**
 *
 * @export
 * @interface SchemaProduct
 */
export interface SchemaProduct {
  /**
   *
   * @type {string}
   * @memberof SchemaProduct
   */
  CreatedAt?: string;
  /**
   *
   * @type {Array<SchemaCategory>}
   * @memberof SchemaProduct
   */
  category?: Array<SchemaCategory>;
  /**
   *
   * @type {string}
   * @memberof SchemaProduct
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof SchemaProduct
   */
  external_id?: string;
  /**
   *
   * @type {string}
   * @memberof SchemaProduct
   */
  handle?: string;
  /**
   *
   * @type {number}
   * @memberof SchemaProduct
   */
  height?: number;
  /**
   *
   * @type {string}
   * @memberof SchemaProduct
   */
  hs_code?: string;
  /**
   *
   * @type {string}
   * @memberof SchemaProduct
   */
  id?: string;
  /**
   *
   * @type {Array<SchemaImage>}
   * @memberof SchemaProduct
   */
  images?: Array<SchemaImage>;
  /**
   *
   * @type {number}
   * @memberof SchemaProduct
   */
  length?: number;
  /**
   *
   * @type {string}
   * @memberof SchemaProduct
   */
  material?: string;
  /**
   *
   * @type {string}
   * @memberof SchemaProduct
   */
  mid_code?: string;
  /**
   *
   * @type {string}
   * @memberof SchemaProduct
   */
  origin_country?: string;
  /**
   *
   * @type {string}
   * @memberof SchemaProduct
   */
  status?: string;
  /**
   *
   * @type {string}
   * @memberof SchemaProduct
   */
  subtitle?: string;
  /**
   *
   * @type {SchemaImage}
   * @memberof SchemaProduct
   */
  thumbnail?: SchemaImage;
  /**
   * Foriegn Key
   * @type {string}
   * @memberof SchemaProduct
   */
  thumbnail_id?: string;
  /**
   *
   * @type {string}
   * @memberof SchemaProduct
   */
  title?: string;
  /**
   * This is for GORM to load Data when fetching from Datamodels
   * @type {Array<SchemaVariant>}
   * @memberof SchemaProduct
   */
  variants?: Array<SchemaVariant>;
  /**
   *
   * @type {number}
   * @memberof SchemaProduct
   */
  weight?: number;
  /**
   *
   * @type {number}
   * @memberof SchemaProduct
   */
  width?: number;
}
/**
 *
 * @export
 * @interface SchemaVariant
 */
export interface SchemaVariant {
  /**
   *
   * @type {string}
   * @memberof SchemaVariant
   */
  CreatedAt?: string;
  /**
   *
   * @type {string}
   * @memberof SchemaVariant
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof SchemaVariant
   */
  external_id?: string;
  /**
   *
   * @type {string}
   * @memberof SchemaVariant
   */
  handle?: string;
  /**
   *
   * @type {number}
   * @memberof SchemaVariant
   */
  height?: number;
  /**
   *
   * @type {string}
   * @memberof SchemaVariant
   */
  hs_code?: string;
  /**
   *
   * @type {string}
   * @memberof SchemaVariant
   */
  id?: string;
  /**
   *
   * @type {number}
   * @memberof SchemaVariant
   */
  length?: number;
  /**
   *
   * @type {string}
   * @memberof SchemaVariant
   */
  material?: string;
  /**
   *
   * @type {string}
   * @memberof SchemaVariant
   */
  mid_code?: string;
  /**
   *
   * @type {string}
   * @memberof SchemaVariant
   */
  origin_country?: string;
  /**
   *
   * @type {string}
   * @memberof SchemaVariant
   */
  product_id?: string;
  /**
   *
   * @type {string}
   * @memberof SchemaVariant
   */
  status?: string;
  /**
   *
   * @type {string}
   * @memberof SchemaVariant
   */
  subtitle?: string;
  /**
   *
   * @type {string}
   * @memberof SchemaVariant
   */
  title?: string;
  /**
   *
   * @type {Array<SchemaOptionValue>}
   * @memberof SchemaVariant
   */
  values?: Array<SchemaOptionValue>;
  /**
   *
   * @type {number}
   * @memberof SchemaVariant
   */
  weight?: number;
  /**
   *
   * @type {number}
   * @memberof SchemaVariant
   */
  width?: number;
}
/**
 *
 * @export
 * @interface ServicesAddOptionValuesOutput
 */
export interface ServicesAddOptionValuesOutput {
  /**
   *
   * @type {SchemaOption}
   * @memberof ServicesAddOptionValuesOutput
   */
  option?: SchemaOption;
}
/**
 *
 * @export
 * @interface ServicesAddProductOptionOutput
 */
export interface ServicesAddProductOptionOutput {
  /**
   *
   * @type {SchemaOption}
   * @memberof ServicesAddProductOptionOutput
   */
  result?: SchemaOption;
}
/**
 *
 * @export
 * @interface ServicesCreateProductInput
 */
export interface ServicesCreateProductInput {
  /**
   *
   * @type {string}
   * @memberof ServicesCreateProductInput
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof ServicesCreateProductInput
   */
  external_id?: string;
  /**
   *
   * @type {string}
   * @memberof ServicesCreateProductInput
   */
  handle?: string;
  /**
   *
   * @type {number}
   * @memberof ServicesCreateProductInput
   */
  height?: number;
  /**
   *
   * @type {string}
   * @memberof ServicesCreateProductInput
   */
  hs_code?: string;
  /**
   *
   * @type {string}
   * @memberof ServicesCreateProductInput
   */
  id?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ServicesCreateProductInput
   */
  images?: Array<string>;
  /**
   *
   * @type {number}
   * @memberof ServicesCreateProductInput
   */
  length?: number;
  /**
   *
   * @type {string}
   * @memberof ServicesCreateProductInput
   */
  material?: string;
  /**
   *
   * @type {string}
   * @memberof ServicesCreateProductInput
   */
  mid_code?: string;
  /**
   *
   * @type {string}
   * @memberof ServicesCreateProductInput
   */
  origin_country?: string;
  /**
   *
   * @type {string}
   * @memberof ServicesCreateProductInput
   */
  status?: string;
  /**
   *
   * @type {string}
   * @memberof ServicesCreateProductInput
   */
  subtitle?: string;
  /**
   *
   * @type {string}
   * @memberof ServicesCreateProductInput
   */
  thumbnail?: string;
  /**
   *
   * @type {string}
   * @memberof ServicesCreateProductInput
   */
  title?: string;
  /**
   *
   * @type {number}
   * @memberof ServicesCreateProductInput
   */
  weight?: number;
  /**
   *
   * @type {number}
   * @memberof ServicesCreateProductInput
   */
  width?: number;
}
/**
 *
 * @export
 * @interface ServicesCreateProductOutput
 */
export interface ServicesCreateProductOutput {
  /**
   *
   * @type {SchemaProduct}
   * @memberof ServicesCreateProductOutput
   */
  product?: SchemaProduct;
}
/**
 *
 * @export
 * @interface ServicesCreateVariantOutput
 */
export interface ServicesCreateVariantOutput {
  /**
   *
   * @type {SchemaVariant}
   * @memberof ServicesCreateVariantOutput
   */
  product?: SchemaVariant;
}
/**
 *
 * @export
 * @interface ServicesDeleteOptionValueOutput
 */
export interface ServicesDeleteOptionValueOutput {
  /**
   *
   * @type {boolean}
   * @memberof ServicesDeleteOptionValueOutput
   */
  Delete_Status?: boolean;
  /**
   *
   * @type {string}
   * @memberof ServicesDeleteOptionValueOutput
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof ServicesDeleteOptionValueOutput
   */
  object?: string;
}
/**
 *
 * @export
 * @interface ServicesDeleteProductOptionOutput
 */
export interface ServicesDeleteProductOptionOutput {
  /**
   *
   * @type {boolean}
   * @memberof ServicesDeleteProductOptionOutput
   */
  Delete_Status?: boolean;
  /**
   *
   * @type {string}
   * @memberof ServicesDeleteProductOptionOutput
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof ServicesDeleteProductOptionOutput
   */
  object?: string;
  /**
   *
   * @type {SchemaOption}
   * @memberof ServicesDeleteProductOptionOutput
   */
  result?: SchemaOption;
}
/**
 *
 * @export
 * @interface ServicesDeleteProductOutput
 */
export interface ServicesDeleteProductOutput {
  /**
   *
   * @type {boolean}
   * @memberof ServicesDeleteProductOutput
   */
  Delete_Status?: boolean;
  /**
   *
   * @type {string}
   * @memberof ServicesDeleteProductOutput
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof ServicesDeleteProductOutput
   */
  object?: string;
}
/**
 *
 * @export
 * @interface ServicesDeleteVariantOutput
 */
export interface ServicesDeleteVariantOutput {
  /**
   *
   * @type {boolean}
   * @memberof ServicesDeleteVariantOutput
   */
  Delete_Status?: boolean;
  /**
   *
   * @type {string}
   * @memberof ServicesDeleteVariantOutput
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof ServicesDeleteVariantOutput
   */
  object?: string;
}
/**
 *
 * @export
 * @interface ServicesGetOptionOutput
 */
export interface ServicesGetOptionOutput {
  /**
   *
   * @type {string}
   * @memberof ServicesGetOptionOutput
   */
  CreatedAt?: string;
  /**
   *
   * @type {string}
   * @memberof ServicesGetOptionOutput
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof ServicesGetOptionOutput
   */
  product_id?: string;
  /**
   *
   * @type {string}
   * @memberof ServicesGetOptionOutput
   */
  title?: string;
  /**
   *
   * @type {Array<SchemaOptionValue>}
   * @memberof ServicesGetOptionOutput
   */
  values?: Array<SchemaOptionValue>;
}
/**
 *
 * @export
 * @interface ServicesGetProductOutput
 */
export interface ServicesGetProductOutput {
  /**
   *
   * @type {SchemaProduct}
   * @memberof ServicesGetProductOutput
   */
  product?: SchemaProduct;
}
/**
 *
 * @export
 * @interface ServicesGetVariantOutput
 */
export interface ServicesGetVariantOutput {
  /**
   *
   * @type {SchemaVariant}
   * @memberof ServicesGetVariantOutput
   */
  variant?: SchemaVariant;
}
/**
 *
 * @export
 * @interface ServicesListAProductVariantsOutput
 */
export interface ServicesListAProductVariantsOutput {
  /**
   *
   * @type {number}
   * @memberof ServicesListAProductVariantsOutput
   */
  count?: number;
  /**
   *
   * @type {number}
   * @memberof ServicesListAProductVariantsOutput
   */
  limit?: number;
  /**
   *
   * @type {number}
   * @memberof ServicesListAProductVariantsOutput
   */
  offset?: number;
  /**
   *
   * @type {Array<SchemaVariant>}
   * @memberof ServicesListAProductVariantsOutput
   */
  variants?: Array<SchemaVariant>;
}
/**
 *
 * @export
 * @interface ServicesListProductsOutput
 */
export interface ServicesListProductsOutput {
  /**
   *
   * @type {number}
   * @memberof ServicesListProductsOutput
   */
  count?: number;
  /**
   *
   * @type {number}
   * @memberof ServicesListProductsOutput
   */
  limit?: number;
  /**
   *
   * @type {number}
   * @memberof ServicesListProductsOutput
   */
  offset?: number;
  /**
   *
   * @type {Array<SchemaProduct>}
   * @memberof ServicesListProductsOutput
   */
  products?: Array<SchemaProduct>;
}
/**
 *
 * @export
 * @interface ServicesListVariantsOutput
 */
export interface ServicesListVariantsOutput {
  /**
   *
   * @type {number}
   * @memberof ServicesListVariantsOutput
   */
  count?: number;
  /**
   *
   * @type {number}
   * @memberof ServicesListVariantsOutput
   */
  limit?: number;
  /**
   *
   * @type {number}
   * @memberof ServicesListVariantsOutput
   */
  offset?: number;
  /**
   *
   * @type {Array<SchemaVariant>}
   * @memberof ServicesListVariantsOutput
   */
  variants?: Array<SchemaVariant>;
}
/**
 *
 * @export
 * @interface ServicesUpdateProductOptionOutput
 */
export interface ServicesUpdateProductOptionOutput {
  /**
   *
   * @type {SchemaOption}
   * @memberof ServicesUpdateProductOptionOutput
   */
  result?: SchemaOption;
}
/**
 *
 * @export
 * @interface ServicesUpdateVariantOutput
 */
export interface ServicesUpdateVariantOutput {
  /**
   *
   * @type {SchemaVariant}
   * @memberof ServicesUpdateVariantOutput
   */
  variant?: SchemaVariant;
}
/**
 *
 * @export
 * @interface TypesAPIError
 */
export interface TypesAPIError {
  /**
   *
   * @type {number}
   * @memberof TypesAPIError
   */
  Code?: number;
  /**
   *
   * @type {object}
   * @memberof TypesAPIError
   */
  Msg?: object;
  /**
   *
   * @type {string}
   * @memberof TypesAPIError
   */
  Type?: string;
}

/**
 * ProductsApi - axios parameter creator
 * @export
 */
export const ProductsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * List products with optional search parameters like offset, limit, and query
     * @summary List products with search functionality
     * @param {number} [offset] Offset for pagination
     * @param {number} [limit] Limit for pagination
     * @param {string} [query] Search query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productsGet: async (
      offset?: number,
      limit?: number,
      query?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/products`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (query !== undefined) {
        localVarQueryParameter["query"] = query;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Delete a product with the specified ID
     * @summary Delete a product by ID
     * @param {string} id Product ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productsIdDelete: async (
      id: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("productsIdDelete", "id", id);
      const localVarPath = `/products/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieve a product by its ID
     * @summary Get a product by ID
     * @param {string} id Product ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productsIdGet: async (
      id: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("productsIdGet", "id", id);
      const localVarPath = `/products/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Delete an existing option from the specified product
     * @summary Delete a product option
     * @param {string} id Product ID
     * @param {string} optionId Option ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productsIdOptionsOptionIdDelete: async (
      id: string,
      optionId: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("productsIdOptionsOptionIdDelete", "id", id);
      // verify required parameter 'optionId' is not null or undefined
      assertParamExists(
        "productsIdOptionsOptionIdDelete",
        "optionId",
        optionId
      );
      const localVarPath = `/products/{id}/options/{option_id}`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"option_id"}}`, encodeURIComponent(String(optionId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get Product option
     * @summary Get product option
     * @param {string} id Product ID
     * @param {string} optionId Option ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productsIdOptionsOptionIdGet: async (
      id: string,
      optionId: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("productsIdOptionsOptionIdGet", "id", id);
      // verify required parameter 'optionId' is not null or undefined
      assertParamExists("productsIdOptionsOptionIdGet", "optionId", optionId);
      const localVarPath = `/products/{id}/options/{option_id}`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"option_id"}}`, encodeURIComponent(String(optionId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Update the details of an existing option for the specified product
     * @summary Update an existing product option
     * @param {string} id Product ID
     * @param {string} optionId Option ID
     * @param {ApiUpdateProductOptionBody} request Product option details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productsIdOptionsOptionIdPut: async (
      id: string,
      optionId: string,
      request: ApiUpdateProductOptionBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("productsIdOptionsOptionIdPut", "id", id);
      // verify required parameter 'optionId' is not null or undefined
      assertParamExists("productsIdOptionsOptionIdPut", "optionId", optionId);
      // verify required parameter 'request' is not null or undefined
      assertParamExists("productsIdOptionsOptionIdPut", "request", request);
      const localVarPath = `/products/{id}/options/{option_id}`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"option_id"}}`, encodeURIComponent(String(optionId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        request,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Adds multiple values to an option
     * @summary Add option values
     * @param {string} id Product ID
     * @param {string} optionId Option ID
     * @param {ApiAddOptionValuesBody} request Values
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productsIdOptionsOptionIdValuesPost: async (
      id: string,
      optionId: string,
      request: ApiAddOptionValuesBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("productsIdOptionsOptionIdValuesPost", "id", id);
      // verify required parameter 'optionId' is not null or undefined
      assertParamExists(
        "productsIdOptionsOptionIdValuesPost",
        "optionId",
        optionId
      );
      // verify required parameter 'request' is not null or undefined
      assertParamExists(
        "productsIdOptionsOptionIdValuesPost",
        "request",
        request
      );
      const localVarPath = `/products/{id}/options/{option_id}/values`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"option_id"}}`, encodeURIComponent(String(optionId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        request,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Deletes a specific value from an option
     * @summary Delete option value
     * @param {string} id Product ID
     * @param {string} optionId Option ID
     * @param {string} valueId Value ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productsIdOptionsOptionIdValuesValueIdDelete: async (
      id: string,
      optionId: string,
      valueId: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        "productsIdOptionsOptionIdValuesValueIdDelete",
        "id",
        id
      );
      // verify required parameter 'optionId' is not null or undefined
      assertParamExists(
        "productsIdOptionsOptionIdValuesValueIdDelete",
        "optionId",
        optionId
      );
      // verify required parameter 'valueId' is not null or undefined
      assertParamExists(
        "productsIdOptionsOptionIdValuesValueIdDelete",
        "valueId",
        valueId
      );
      const localVarPath =
        `/products/{id}/options/{option_id}/values/{value_id}`
          .replace(`{${"id"}}`, encodeURIComponent(String(id)))
          .replace(`{${"option_id"}}`, encodeURIComponent(String(optionId)))
          .replace(`{${"value_id"}}`, encodeURIComponent(String(valueId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Add a new option to the specified product
     * @summary Add a new product option
     * @param {string} id Product ID
     * @param {ApiAddProductOptionBody} request Product option details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productsIdOptionsPost: async (
      id: string,
      request: ApiAddProductOptionBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("productsIdOptionsPost", "id", id);
      // verify required parameter 'request' is not null or undefined
      assertParamExists("productsIdOptionsPost", "request", request);
      const localVarPath = `/products/{id}/options`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        request,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Update a product with the input payload
     * @summary Update a product by ID
     * @param {string} id Product ID
     * @param {ApiUpdateProductBody} request Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productsIdPut: async (
      id: string,
      request: ApiUpdateProductBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("productsIdPut", "id", id);
      // verify required parameter 'request' is not null or undefined
      assertParamExists("productsIdPut", "request", request);
      const localVarPath = `/products/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        request,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * List all variants for a product with optional search parameters like offset, limit, and query
     * @summary List all variants for a product with search functionality
     * @param {string} id Product ID
     * @param {number} [offset] Offset for pagination
     * @param {number} [limit] Limit for pagination
     * @param {string} [query] Search query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productsIdVariantsGet: async (
      id: string,
      offset?: number,
      limit?: number,
      query?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("productsIdVariantsGet", "id", id);
      const localVarPath = `/products/{id}/variants`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (query !== undefined) {
        localVarQueryParameter["query"] = query;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Create a new variant for a specified product
     * @summary Create a new product variant
     * @param {string} id Product ID
     * @param {ApiCreateVariantBody} requestBody Product variant details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productsIdVariantsPost: async (
      id: string,
      requestBody: ApiCreateVariantBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("productsIdVariantsPost", "id", id);
      // verify required parameter 'requestBody' is not null or undefined
      assertParamExists("productsIdVariantsPost", "requestBody", requestBody);
      const localVarPath = `/products/{id}/variants`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Create a new product with the input payload
     * @summary Create a new product
     * @param {ServicesCreateProductInput} request Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productsPost: async (
      request: ServicesCreateProductInput,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'request' is not null or undefined
      assertParamExists("productsPost", "request", request);
      const localVarPath = `/products`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        request,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ProductsApi - functional programming interface
 * @export
 */
export const ProductsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ProductsApiAxiosParamCreator(configuration);
  return {
    /**
     * List products with optional search parameters like offset, limit, and query
     * @summary List products with search functionality
     * @param {number} [offset] Offset for pagination
     * @param {number} [limit] Limit for pagination
     * @param {string} [query] Search query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async productsGet(
      offset?: number,
      limit?: number,
      query?: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ServicesListProductsOutput>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.productsGet(
        offset,
        limit,
        query,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ProductsApi.productsGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Delete a product with the specified ID
     * @summary Delete a product by ID
     * @param {string} id Product ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async productsIdDelete(
      id: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ServicesDeleteProductOutput>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.productsIdDelete(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ProductsApi.productsIdDelete"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Retrieve a product by its ID
     * @summary Get a product by ID
     * @param {string} id Product ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async productsIdGet(
      id: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ServicesGetProductOutput>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.productsIdGet(
        id,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ProductsApi.productsIdGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Delete an existing option from the specified product
     * @summary Delete a product option
     * @param {string} id Product ID
     * @param {string} optionId Option ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async productsIdOptionsOptionIdDelete(
      id: string,
      optionId: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ServicesDeleteProductOptionOutput>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.productsIdOptionsOptionIdDelete(
          id,
          optionId,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ProductsApi.productsIdOptionsOptionIdDelete"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Get Product option
     * @summary Get product option
     * @param {string} id Product ID
     * @param {string} optionId Option ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async productsIdOptionsOptionIdGet(
      id: string,
      optionId: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ServicesGetOptionOutput>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.productsIdOptionsOptionIdGet(
          id,
          optionId,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ProductsApi.productsIdOptionsOptionIdGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Update the details of an existing option for the specified product
     * @summary Update an existing product option
     * @param {string} id Product ID
     * @param {string} optionId Option ID
     * @param {ApiUpdateProductOptionBody} request Product option details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async productsIdOptionsOptionIdPut(
      id: string,
      optionId: string,
      request: ApiUpdateProductOptionBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ServicesUpdateProductOptionOutput>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.productsIdOptionsOptionIdPut(
          id,
          optionId,
          request,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ProductsApi.productsIdOptionsOptionIdPut"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Adds multiple values to an option
     * @summary Add option values
     * @param {string} id Product ID
     * @param {string} optionId Option ID
     * @param {ApiAddOptionValuesBody} request Values
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async productsIdOptionsOptionIdValuesPost(
      id: string,
      optionId: string,
      request: ApiAddOptionValuesBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ServicesAddOptionValuesOutput>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.productsIdOptionsOptionIdValuesPost(
          id,
          optionId,
          request,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ProductsApi.productsIdOptionsOptionIdValuesPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Deletes a specific value from an option
     * @summary Delete option value
     * @param {string} id Product ID
     * @param {string} optionId Option ID
     * @param {string} valueId Value ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async productsIdOptionsOptionIdValuesValueIdDelete(
      id: string,
      optionId: string,
      valueId: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ServicesDeleteOptionValueOutput>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.productsIdOptionsOptionIdValuesValueIdDelete(
          id,
          optionId,
          valueId,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "ProductsApi.productsIdOptionsOptionIdValuesValueIdDelete"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Add a new option to the specified product
     * @summary Add a new product option
     * @param {string} id Product ID
     * @param {ApiAddProductOptionBody} request Product option details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async productsIdOptionsPost(
      id: string,
      request: ApiAddProductOptionBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ServicesAddProductOptionOutput>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.productsIdOptionsPost(
          id,
          request,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ProductsApi.productsIdOptionsPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Update a product with the input payload
     * @summary Update a product by ID
     * @param {string} id Product ID
     * @param {ApiUpdateProductBody} request Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async productsIdPut(
      id: string,
      request: ApiUpdateProductBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchemaProduct>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.productsIdPut(
        id,
        request,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ProductsApi.productsIdPut"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * List all variants for a product with optional search parameters like offset, limit, and query
     * @summary List all variants for a product with search functionality
     * @param {string} id Product ID
     * @param {number} [offset] Offset for pagination
     * @param {number} [limit] Limit for pagination
     * @param {string} [query] Search query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async productsIdVariantsGet(
      id: string,
      offset?: number,
      limit?: number,
      query?: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ServicesListAProductVariantsOutput>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.productsIdVariantsGet(
          id,
          offset,
          limit,
          query,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ProductsApi.productsIdVariantsGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Create a new variant for a specified product
     * @summary Create a new product variant
     * @param {string} id Product ID
     * @param {ApiCreateVariantBody} requestBody Product variant details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async productsIdVariantsPost(
      id: string,
      requestBody: ApiCreateVariantBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ServicesCreateVariantOutput>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.productsIdVariantsPost(
          id,
          requestBody,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ProductsApi.productsIdVariantsPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Create a new product with the input payload
     * @summary Create a new product
     * @param {ServicesCreateProductInput} request Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async productsPost(
      request: ServicesCreateProductInput,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ServicesCreateProductOutput>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.productsPost(
        request,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ProductsApi.productsPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * ProductsApi - factory interface
 * @export
 */
export const ProductsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ProductsApiFp(configuration);
  return {
    /**
     * List products with optional search parameters like offset, limit, and query
     * @summary List products with search functionality
     * @param {number} [offset] Offset for pagination
     * @param {number} [limit] Limit for pagination
     * @param {string} [query] Search query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productsGet(
      offset?: number,
      limit?: number,
      query?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ServicesListProductsOutput> {
      return localVarFp
        .productsGet(offset, limit, query, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Delete a product with the specified ID
     * @summary Delete a product by ID
     * @param {string} id Product ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productsIdDelete(
      id: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ServicesDeleteProductOutput> {
      return localVarFp
        .productsIdDelete(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieve a product by its ID
     * @summary Get a product by ID
     * @param {string} id Product ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productsIdGet(
      id: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ServicesGetProductOutput> {
      return localVarFp
        .productsIdGet(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Delete an existing option from the specified product
     * @summary Delete a product option
     * @param {string} id Product ID
     * @param {string} optionId Option ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productsIdOptionsOptionIdDelete(
      id: string,
      optionId: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ServicesDeleteProductOptionOutput> {
      return localVarFp
        .productsIdOptionsOptionIdDelete(id, optionId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get Product option
     * @summary Get product option
     * @param {string} id Product ID
     * @param {string} optionId Option ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productsIdOptionsOptionIdGet(
      id: string,
      optionId: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ServicesGetOptionOutput> {
      return localVarFp
        .productsIdOptionsOptionIdGet(id, optionId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Update the details of an existing option for the specified product
     * @summary Update an existing product option
     * @param {string} id Product ID
     * @param {string} optionId Option ID
     * @param {ApiUpdateProductOptionBody} request Product option details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productsIdOptionsOptionIdPut(
      id: string,
      optionId: string,
      request: ApiUpdateProductOptionBody,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ServicesUpdateProductOptionOutput> {
      return localVarFp
        .productsIdOptionsOptionIdPut(id, optionId, request, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Adds multiple values to an option
     * @summary Add option values
     * @param {string} id Product ID
     * @param {string} optionId Option ID
     * @param {ApiAddOptionValuesBody} request Values
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productsIdOptionsOptionIdValuesPost(
      id: string,
      optionId: string,
      request: ApiAddOptionValuesBody,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ServicesAddOptionValuesOutput> {
      return localVarFp
        .productsIdOptionsOptionIdValuesPost(id, optionId, request, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Deletes a specific value from an option
     * @summary Delete option value
     * @param {string} id Product ID
     * @param {string} optionId Option ID
     * @param {string} valueId Value ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productsIdOptionsOptionIdValuesValueIdDelete(
      id: string,
      optionId: string,
      valueId: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ServicesDeleteOptionValueOutput> {
      return localVarFp
        .productsIdOptionsOptionIdValuesValueIdDelete(
          id,
          optionId,
          valueId,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Add a new option to the specified product
     * @summary Add a new product option
     * @param {string} id Product ID
     * @param {ApiAddProductOptionBody} request Product option details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productsIdOptionsPost(
      id: string,
      request: ApiAddProductOptionBody,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ServicesAddProductOptionOutput> {
      return localVarFp
        .productsIdOptionsPost(id, request, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Update a product with the input payload
     * @summary Update a product by ID
     * @param {string} id Product ID
     * @param {ApiUpdateProductBody} request Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productsIdPut(
      id: string,
      request: ApiUpdateProductBody,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<SchemaProduct> {
      return localVarFp
        .productsIdPut(id, request, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * List all variants for a product with optional search parameters like offset, limit, and query
     * @summary List all variants for a product with search functionality
     * @param {string} id Product ID
     * @param {number} [offset] Offset for pagination
     * @param {number} [limit] Limit for pagination
     * @param {string} [query] Search query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productsIdVariantsGet(
      id: string,
      offset?: number,
      limit?: number,
      query?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ServicesListAProductVariantsOutput> {
      return localVarFp
        .productsIdVariantsGet(id, offset, limit, query, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Create a new variant for a specified product
     * @summary Create a new product variant
     * @param {string} id Product ID
     * @param {ApiCreateVariantBody} requestBody Product variant details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productsIdVariantsPost(
      id: string,
      requestBody: ApiCreateVariantBody,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ServicesCreateVariantOutput> {
      return localVarFp
        .productsIdVariantsPost(id, requestBody, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Create a new product with the input payload
     * @summary Create a new product
     * @param {ServicesCreateProductInput} request Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productsPost(
      request: ServicesCreateProductInput,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ServicesCreateProductOutput> {
      return localVarFp
        .productsPost(request, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ProductsApi - object-oriented interface
 * @export
 * @class ProductsApi
 * @extends {BaseAPI}
 */
export class ProductsApi extends BaseAPI {
  /**
   * List products with optional search parameters like offset, limit, and query
   * @summary List products with search functionality
   * @param {number} [offset] Offset for pagination
   * @param {number} [limit] Limit for pagination
   * @param {string} [query] Search query
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProductsApi
   */
  public productsGet(
    offset?: number,
    limit?: number,
    query?: string,
    options?: RawAxiosRequestConfig
  ) {
    return ProductsApiFp(this.configuration)
      .productsGet(offset, limit, query, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Delete a product with the specified ID
   * @summary Delete a product by ID
   * @param {string} id Product ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProductsApi
   */
  public productsIdDelete(id: string, options?: RawAxiosRequestConfig) {
    return ProductsApiFp(this.configuration)
      .productsIdDelete(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Retrieve a product by its ID
   * @summary Get a product by ID
   * @param {string} id Product ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProductsApi
   */
  public productsIdGet(id: string, options?: RawAxiosRequestConfig) {
    return ProductsApiFp(this.configuration)
      .productsIdGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Delete an existing option from the specified product
   * @summary Delete a product option
   * @param {string} id Product ID
   * @param {string} optionId Option ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProductsApi
   */
  public productsIdOptionsOptionIdDelete(
    id: string,
    optionId: string,
    options?: RawAxiosRequestConfig
  ) {
    return ProductsApiFp(this.configuration)
      .productsIdOptionsOptionIdDelete(id, optionId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get Product option
   * @summary Get product option
   * @param {string} id Product ID
   * @param {string} optionId Option ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProductsApi
   */
  public productsIdOptionsOptionIdGet(
    id: string,
    optionId: string,
    options?: RawAxiosRequestConfig
  ) {
    return ProductsApiFp(this.configuration)
      .productsIdOptionsOptionIdGet(id, optionId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Update the details of an existing option for the specified product
   * @summary Update an existing product option
   * @param {string} id Product ID
   * @param {string} optionId Option ID
   * @param {ApiUpdateProductOptionBody} request Product option details
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProductsApi
   */
  public productsIdOptionsOptionIdPut(
    id: string,
    optionId: string,
    request: ApiUpdateProductOptionBody,
    options?: RawAxiosRequestConfig
  ) {
    return ProductsApiFp(this.configuration)
      .productsIdOptionsOptionIdPut(id, optionId, request, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Adds multiple values to an option
   * @summary Add option values
   * @param {string} id Product ID
   * @param {string} optionId Option ID
   * @param {ApiAddOptionValuesBody} request Values
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProductsApi
   */
  public productsIdOptionsOptionIdValuesPost(
    id: string,
    optionId: string,
    request: ApiAddOptionValuesBody,
    options?: RawAxiosRequestConfig
  ) {
    return ProductsApiFp(this.configuration)
      .productsIdOptionsOptionIdValuesPost(id, optionId, request, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Deletes a specific value from an option
   * @summary Delete option value
   * @param {string} id Product ID
   * @param {string} optionId Option ID
   * @param {string} valueId Value ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProductsApi
   */
  public productsIdOptionsOptionIdValuesValueIdDelete(
    id: string,
    optionId: string,
    valueId: string,
    options?: RawAxiosRequestConfig
  ) {
    return ProductsApiFp(this.configuration)
      .productsIdOptionsOptionIdValuesValueIdDelete(
        id,
        optionId,
        valueId,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Add a new option to the specified product
   * @summary Add a new product option
   * @param {string} id Product ID
   * @param {ApiAddProductOptionBody} request Product option details
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProductsApi
   */
  public productsIdOptionsPost(
    id: string,
    request: ApiAddProductOptionBody,
    options?: RawAxiosRequestConfig
  ) {
    return ProductsApiFp(this.configuration)
      .productsIdOptionsPost(id, request, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Update a product with the input payload
   * @summary Update a product by ID
   * @param {string} id Product ID
   * @param {ApiUpdateProductBody} request Request body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProductsApi
   */
  public productsIdPut(
    id: string,
    request: ApiUpdateProductBody,
    options?: RawAxiosRequestConfig
  ) {
    return ProductsApiFp(this.configuration)
      .productsIdPut(id, request, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * List all variants for a product with optional search parameters like offset, limit, and query
   * @summary List all variants for a product with search functionality
   * @param {string} id Product ID
   * @param {number} [offset] Offset for pagination
   * @param {number} [limit] Limit for pagination
   * @param {string} [query] Search query
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProductsApi
   */
  public productsIdVariantsGet(
    id: string,
    offset?: number,
    limit?: number,
    query?: string,
    options?: RawAxiosRequestConfig
  ) {
    return ProductsApiFp(this.configuration)
      .productsIdVariantsGet(id, offset, limit, query, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Create a new variant for a specified product
   * @summary Create a new product variant
   * @param {string} id Product ID
   * @param {ApiCreateVariantBody} requestBody Product variant details
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProductsApi
   */
  public productsIdVariantsPost(
    id: string,
    requestBody: ApiCreateVariantBody,
    options?: RawAxiosRequestConfig
  ) {
    return ProductsApiFp(this.configuration)
      .productsIdVariantsPost(id, requestBody, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Create a new product with the input payload
   * @summary Create a new product
   * @param {ServicesCreateProductInput} request Request body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProductsApi
   */
  public productsPost(
    request: ServicesCreateProductInput,
    options?: RawAxiosRequestConfig
  ) {
    return ProductsApiFp(this.configuration)
      .productsPost(request, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * VariantsApi - axios parameter creator
 * @export
 */
export const VariantsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Delete an existing product variant by ID
     * @summary Delete a product variant
     * @param {string} id Product ID
     * @param {string} variantId Variant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productsIdVariantsVariantIdDelete: async (
      id: string,
      variantId: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("productsIdVariantsVariantIdDelete", "id", id);
      // verify required parameter 'variantId' is not null or undefined
      assertParamExists(
        "productsIdVariantsVariantIdDelete",
        "variantId",
        variantId
      );
      const localVarPath = `/products/{id}/variants/{variant_id}`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"variant_id"}}`, encodeURIComponent(String(variantId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Update the details of an existing product variant
     * @summary Update a product variant
     * @param {string} id Product ID
     * @param {string} variantId Variant ID
     * @param {ApiUpdateVariantBody} request Updated product variant details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productsIdVariantsVariantIdPut: async (
      id: string,
      variantId: string,
      request: ApiUpdateVariantBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("productsIdVariantsVariantIdPut", "id", id);
      // verify required parameter 'variantId' is not null or undefined
      assertParamExists(
        "productsIdVariantsVariantIdPut",
        "variantId",
        variantId
      );
      // verify required parameter 'request' is not null or undefined
      assertParamExists("productsIdVariantsVariantIdPut", "request", request);
      const localVarPath = `/products/{id}/variants/{variant_id}`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"variant_id"}}`, encodeURIComponent(String(variantId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        request,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * List all product variants with optional search parameters
     * @summary List all product variants
     * @param {number} [offset] Offset for pagination
     * @param {number} [limit] Limit for pagination
     * @param {string} [query] Search query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    variantsGet: async (
      offset?: number,
      limit?: number,
      query?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/variants`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (query !== undefined) {
        localVarQueryParameter["query"] = query;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get the details of a product variant by ID
     * @summary Get a product variant
     * @param {string} id Variant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    variantsIdGet: async (
      id: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("variantsIdGet", "id", id);
      const localVarPath = `/variants/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * VariantsApi - functional programming interface
 * @export
 */
export const VariantsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = VariantsApiAxiosParamCreator(configuration);
  return {
    /**
     * Delete an existing product variant by ID
     * @summary Delete a product variant
     * @param {string} id Product ID
     * @param {string} variantId Variant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async productsIdVariantsVariantIdDelete(
      id: string,
      variantId: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ServicesDeleteVariantOutput>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.productsIdVariantsVariantIdDelete(
          id,
          variantId,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["VariantsApi.productsIdVariantsVariantIdDelete"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Update the details of an existing product variant
     * @summary Update a product variant
     * @param {string} id Product ID
     * @param {string} variantId Variant ID
     * @param {ApiUpdateVariantBody} request Updated product variant details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async productsIdVariantsVariantIdPut(
      id: string,
      variantId: string,
      request: ApiUpdateVariantBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ServicesUpdateVariantOutput>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.productsIdVariantsVariantIdPut(
          id,
          variantId,
          request,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["VariantsApi.productsIdVariantsVariantIdPut"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * List all product variants with optional search parameters
     * @summary List all product variants
     * @param {number} [offset] Offset for pagination
     * @param {number} [limit] Limit for pagination
     * @param {string} [query] Search query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async variantsGet(
      offset?: number,
      limit?: number,
      query?: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<ServicesListVariantsOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.variantsGet(
        offset,
        limit,
        query,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["VariantsApi.variantsGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Get the details of a product variant by ID
     * @summary Get a product variant
     * @param {string} id Variant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async variantsIdGet(
      id: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ServicesGetVariantOutput>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.variantsIdGet(
        id,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["VariantsApi.variantsIdGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * VariantsApi - factory interface
 * @export
 */
export const VariantsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = VariantsApiFp(configuration);
  return {
    /**
     * Delete an existing product variant by ID
     * @summary Delete a product variant
     * @param {string} id Product ID
     * @param {string} variantId Variant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productsIdVariantsVariantIdDelete(
      id: string,
      variantId: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ServicesDeleteVariantOutput> {
      return localVarFp
        .productsIdVariantsVariantIdDelete(id, variantId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Update the details of an existing product variant
     * @summary Update a product variant
     * @param {string} id Product ID
     * @param {string} variantId Variant ID
     * @param {ApiUpdateVariantBody} request Updated product variant details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productsIdVariantsVariantIdPut(
      id: string,
      variantId: string,
      request: ApiUpdateVariantBody,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ServicesUpdateVariantOutput> {
      return localVarFp
        .productsIdVariantsVariantIdPut(id, variantId, request, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * List all product variants with optional search parameters
     * @summary List all product variants
     * @param {number} [offset] Offset for pagination
     * @param {number} [limit] Limit for pagination
     * @param {string} [query] Search query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    variantsGet(
      offset?: number,
      limit?: number,
      query?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Array<ServicesListVariantsOutput>> {
      return localVarFp
        .variantsGet(offset, limit, query, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get the details of a product variant by ID
     * @summary Get a product variant
     * @param {string} id Variant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    variantsIdGet(
      id: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ServicesGetVariantOutput> {
      return localVarFp
        .variantsIdGet(id, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * VariantsApi - object-oriented interface
 * @export
 * @class VariantsApi
 * @extends {BaseAPI}
 */
export class VariantsApi extends BaseAPI {
  /**
   * Delete an existing product variant by ID
   * @summary Delete a product variant
   * @param {string} id Product ID
   * @param {string} variantId Variant ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VariantsApi
   */
  public productsIdVariantsVariantIdDelete(
    id: string,
    variantId: string,
    options?: RawAxiosRequestConfig
  ) {
    return VariantsApiFp(this.configuration)
      .productsIdVariantsVariantIdDelete(id, variantId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Update the details of an existing product variant
   * @summary Update a product variant
   * @param {string} id Product ID
   * @param {string} variantId Variant ID
   * @param {ApiUpdateVariantBody} request Updated product variant details
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VariantsApi
   */
  public productsIdVariantsVariantIdPut(
    id: string,
    variantId: string,
    request: ApiUpdateVariantBody,
    options?: RawAxiosRequestConfig
  ) {
    return VariantsApiFp(this.configuration)
      .productsIdVariantsVariantIdPut(id, variantId, request, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * List all product variants with optional search parameters
   * @summary List all product variants
   * @param {number} [offset] Offset for pagination
   * @param {number} [limit] Limit for pagination
   * @param {string} [query] Search query
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VariantsApi
   */
  public variantsGet(
    offset?: number,
    limit?: number,
    query?: string,
    options?: RawAxiosRequestConfig
  ) {
    return VariantsApiFp(this.configuration)
      .variantsGet(offset, limit, query, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get the details of a product variant by ID
   * @summary Get a product variant
   * @param {string} id Variant ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VariantsApi
   */
  public variantsIdGet(id: string, options?: RawAxiosRequestConfig) {
    return VariantsApiFp(this.configuration)
      .variantsIdGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
